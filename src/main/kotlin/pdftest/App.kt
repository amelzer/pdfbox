/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package pdftest

import org.apache.pdfbox.pdmodel.PDDocument
import org.apache.pdfbox.pdmodel.PDPageContentStream
import org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState
import org.apache.pdfbox.util.Matrix

class App {
    fun run() {
        val stream = App::class.java.classLoader.getResourceAsStream("Offset.pdf")
        val doc = PDDocument.load(stream)
        val page = doc.getPage(0)

        // Create clean content stream
        val currentPageContentStream = PDPageContentStream(
                doc,
                page,
                PDPageContentStream.AppendMode.APPEND,
                true,
                true //This resets the context and prevents us from having to bother with flipping SKIA coordinates
        )

        // resetContext requires us to be explicit about everything, so make sure to set alpha values
        val extendedGraphicsState = PDExtendedGraphicsState()
        extendedGraphicsState.nonStrokingAlphaConstant = 0.5f
        currentPageContentStream.setGraphicsStateParameters(extendedGraphicsState)

        // Save graphics state for later
        currentPageContentStream.saveGraphicsState()

        // This flips everything that comes after
        currentPageContentStream.transform(Matrix.getScaleInstance(1f, -1f))
        currentPageContentStream.transform(Matrix.getTranslateInstance(0f, -page.cropBox.height));

        // Draw blue rectangle
        currentPageContentStream.setNonStrokingColor(66, 134, 244)
        currentPageContentStream.addRect(100f,10f,29f,-28f)
        currentPageContentStream.fill()

        // Revert the flipping
        currentPageContentStream.restoreGraphicsState()

        // draw red rectangle
        currentPageContentStream.setNonStrokingColor(244, 98, 66)
        currentPageContentStream.addRect(100f,10f,29f,-28f)
        currentPageContentStream.fill()

        // Close and save
        currentPageContentStream.close()
        doc.save("Hello World.pdf")
        doc.close()

        val info = doc.documentInformation
        println("Producer: ${info.producer}")
    }
}

fun main(args: Array<String>) {

    App().run()

}
